#!/bin/bash -e
function usage {
  echo "USAGE: $0 <internal-tld> <hyperkube-image> <hyperkube-tag> <k8s-dns-ip> <cluster-name>"
  echo "example: $0 testing.k8s quay.io/coreos/hyperkube v1.4.5_coreos.0 10.3.0.10 test"

  exit 1
}

if [[ $# -ne 5 ]]; then
  usage
fi

INTERNAL_TLD="$1"
HYPERKUBE_IMAGE="$2"
HYPERKUBE_TAG="$3"
DNS_SERVICE_IP="$4"
CLUSTER_DOMAIN="$5"

mkdir -p .user-data

cat <<EOF > .user-data/worker
#cloud-config

---
coreos:

  etcd2:
    discovery-srv: $INTERNAL_TLD
    peer-trusted-ca-file: /etc/kubernetes/ssl/ca.pem
    peer-client-cert-auth: true
    peer-cert-file: /etc/kubernetes/ssl/k8s-worker.pem
    peer-key-file: /etc/kubernetes/ssl/k8s-worker-key.pem
    proxy: on

  units:
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        [Service]
        ExecStart=/usr/sbin/wipefs -f /dev/xvdf
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdf
        RemainAfterExit=yes
        Type=oneshot

    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4

    - name: etcd2.service
      command: start

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            Restart=always
            RestartSec=10

    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            After=flanneld.service
            Requires=flanneld.service
            [Service]
            Restart=always
            RestartSec=10

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper
        [Service]
        Environment="KUBELET_ACI=$HYPERKUBE_IMAGE"
        Environment="KUBELET_VERSION=$HYPERKUBE_TAG"
        Environment="RKT_OPTS=\\
          --volume dns,kind=host,source=/etc/resolv.conf \\
          --mount volume=dns,target=/etc/resolv.conf \\
          --volume rkt,kind=host,source=/opt/bin/host-rkt \\
          --mount volume=rkt,target=/usr/bin/rkt \\
          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\
          --mount volume=var-lib-rkt,target=/var/lib/rkt \\
          --volume stage,kind=host,source=/tmp \\
          --mount volume=stage,target=/tmp \\
          --volume var-log,kind=host,source=/var/log \\
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet
        ExecStart=/usr/lib/coreos/kubelet-wrapper \\
          --allow-privileged=true \\
          --api-servers=http://master.$INTERNAL_TLD:8080 \\
          --cloud-provider=aws \\
          --cluster-dns=$DNS_SERVICE_IP \\
          --cluster-domain=$CLUSTER_DOMAIN \\
          --config=/etc/kubernetes/manifests \\
          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\
          --register-node=true \\
          --tls-cert-file=/etc/kubernetes/ssl/k8s-worker.pem \\
          --tls-private-key-file=/etc/kubernetes/ssl/k8s-worker-key.pem
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target

  update:
    reboot-strategy: etcd-lock

write-files:
  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

  - path: /etc/kubernetes/kubeconfig.yml
    content: |
      apiVersion: v1
      kind: Config
      clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
      users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/k8s-worker.pem
            client-key: /etc/kubernetes/ssl/k8s-worker-key.pem
      contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
      current-context: kubelet-context

"
EOF
